name: Java CI/CD with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # 1. Java 17 세팅
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 2. Spring Boot 애플리케이션 빌드
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: clean bootJar

      # 3. Docker 이미지 빌드
      - name: docker image build
        run: docker buildx build --platform=linux/arm64 -t ${{ secrets.DOCKERHUB_USERNAME }}/nodam-nodam_backend .

      # 4. Dockerhub 로그인
      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # 5. Dockerhub push
      - name: docker hub push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/nodam-nodam_backend

  run-docker-image:
    needs: build-docker-image
    runs-on: self-hosted

    steps:

      # 1. 최신 이미지로 pull 받기
      - name: docker pull
        run: sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/nodam-nodam_backend

      # 2. 기존의 도커 컨테이너 삭제
      - name: docker stop container
        run: sudo docker rm -f nodam-nodam_backend

      # 3. 최신 이미지로 도커 컨테이너 실행
      - name: docker run new container
        run: sudo docker run -it -d -p 8082:8080 --name nodam-nodam_backend ${{ secrets.DOCKERHUB_USERNAME }}/nodam-nodam_backend

      # 4. 이미지 태그 none인 이미지 삭제
      - name: docker rmi none image
        run: |
          dangling_images=$(docker images -f "dangling=true" -q)
  
          if [ -n "$dangling_images" ]; then
          sudo docker rmi $dangling_images
          else
          echo "No dangling images to remove."
          fi